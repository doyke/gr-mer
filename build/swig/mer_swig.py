# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mer_swig', [dirname(__file__)])
        except ImportError:
            import _mer_swig
            return _mer_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_mer_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mer_swig = swig_import_helper()
    del swig_import_helper
else:
    import _mer_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _mer_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _mer_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _mer_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _mer_swig.high_res_timer_epoch()
class probe_mer_c(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_mer_c_sptr

        Return a shared_ptr to a new instance of mer::probe_mer_c.

        To avoid accidental use of raw pointers, mer::probe_mer_c's constructor is in a private implementation class. mer::probe_mer_c::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_mer_c_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_mer_c
    __del__ = lambda self : None;
probe_mer_c_swigregister = _mer_swig.probe_mer_c_swigregister
probe_mer_c_swigregister(probe_mer_c)

def probe_mer_c_make(*args, **kwargs):
  """
    probe_mer_c_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_mer_c_sptr

    Return a shared_ptr to a new instance of mer::probe_mer_c.

    To avoid accidental use of raw pointers, mer::probe_mer_c's constructor is in a private implementation class. mer::probe_mer_c::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_mer_c_make(*args, **kwargs)

class probe_mer_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_mer_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_mer_c)> self) -> probe_mer_c_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_mer_c)> self, probe_mer_c p) -> probe_mer_c_sptr
        """
        this = _mer_swig.new_probe_mer_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_mer_c_sptr self) -> probe_mer_c"""
        return _mer_swig.probe_mer_c_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_mer_c_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_mer_c_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_mer_c_sptr

        Return a shared_ptr to a new instance of mer::probe_mer_c.

        To avoid accidental use of raw pointers, mer::probe_mer_c's constructor is in a private implementation class. mer::probe_mer_c::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_mer_c_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_mer_c_sptr self) -> unsigned int"""
        return _mer_swig.probe_mer_c_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_mer_c_sptr self, int which, int delay)
        declare_sample_delay(probe_mer_c_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_mer_c_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_mer_c_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_mer_c_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_mer_c_sptr self) -> int"""
        return _mer_swig.probe_mer_c_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_mer_c_sptr self) -> double"""
        return _mer_swig.probe_mer_c_sptr_relative_rate(self)

    def start(self):
        """start(probe_mer_c_sptr self) -> bool"""
        return _mer_swig.probe_mer_c_sptr_start(self)

    def stop(self):
        """stop(probe_mer_c_sptr self) -> bool"""
        return _mer_swig.probe_mer_c_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_mer_c_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_mer_c_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_mer_c_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_mer_c_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_mer_c_sptr self) -> int"""
        return _mer_swig.probe_mer_c_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_mer_c_sptr self, int m)"""
        return _mer_swig.probe_mer_c_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_mer_c_sptr self)"""
        return _mer_swig.probe_mer_c_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_mer_c_sptr self) -> bool"""
        return _mer_swig.probe_mer_c_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_mer_c_sptr self, int m)"""
        return _mer_swig.probe_mer_c_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_mer_c_sptr self) -> int"""
        return _mer_swig.probe_mer_c_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_mer_c_sptr self, int i) -> long"""
        return _mer_swig.probe_mer_c_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_mer_c_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_mer_c_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_mer_c_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_mer_c_sptr self, int i) -> long"""
        return _mer_swig.probe_mer_c_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_mer_c_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_mer_c_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_mer_c_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_mer_c_sptr self, int which) -> float
        pc_input_buffers_full(probe_mer_c_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_mer_c_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_mer_c_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_mer_c_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_mer_c_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_mer_c_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_mer_c_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_mer_c_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_mer_c_sptr self, int which) -> float
        pc_output_buffers_full(probe_mer_c_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_mer_c_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_mer_c_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_mer_c_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_mer_c_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_mer_c_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_mer_c_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_mer_c_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_mer_c_sptr self) -> float"""
        return _mer_swig.probe_mer_c_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_mer_c_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_mer_c_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_mer_c_sptr self)"""
        return _mer_swig.probe_mer_c_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_mer_c_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_mer_c_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_mer_c_sptr self) -> int"""
        return _mer_swig.probe_mer_c_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_mer_c_sptr self) -> int"""
        return _mer_swig.probe_mer_c_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_mer_c_sptr self, int priority) -> int"""
        return _mer_swig.probe_mer_c_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_mer_c_sptr self) -> std::string"""
        return _mer_swig.probe_mer_c_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_mer_c_sptr self) -> std::string"""
        return _mer_swig.probe_mer_c_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_mer_c_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_mer_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_mer_c_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_mer_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_mer_c_sptr self) -> long"""
        return _mer_swig.probe_mer_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_mer_c_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_mer_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_mer_c_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_mer_c_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_mer_c_sptr self) -> std::string"""
        return _mer_swig.probe_mer_c_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_mer_c_sptr self, std::string name)"""
        return _mer_swig.probe_mer_c_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_mer_c_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_mer_c_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_mer_c_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_mer_c_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_mer_c_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_mer_c_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_mer_c_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_mer_c_sptr_message_subscribers(self, *args, **kwargs)

probe_mer_c_sptr_swigregister = _mer_swig.probe_mer_c_sptr_swigregister
probe_mer_c_sptr_swigregister(probe_mer_c_sptr)

probe_mer_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_mer_c = probe_mer_c.make;

class demapper(object):
    """Proxy of C++ gr::mer::demapper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::demapper self, pmt_vector_cfloat map) -> demapper

        Params: (map)
        """
        this = _mer_swig.new_demapper(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_demapper
    __del__ = lambda self : None;
    def demap(self, *args):
        """
        demap(demapper self, gr_complex val) -> int
        demap(demapper self, gr_complex val, int & index) -> gr_complex

        Params: (val)
        """
        return _mer_swig.demapper_demap(self, *args)

    d_constellation = _swig_property(_mer_swig.demapper_d_constellation_get, _mer_swig.demapper_d_constellation_set)
    def left_down_contellation(self, *args, **kwargs):
        """
        left_down_contellation(demapper self, int & decimal_point) -> gr_complex

        Params: (decimal_point)
        """
        return _mer_swig.demapper_left_down_contellation(self, *args, **kwargs)

    def left_up_contellation(self, *args, **kwargs):
        """
        left_up_contellation(demapper self, int & decimal_point) -> gr_complex

        Params: (decimal_point)
        """
        return _mer_swig.demapper_left_up_contellation(self, *args, **kwargs)

    def right_down_contellation(self, *args, **kwargs):
        """
        right_down_contellation(demapper self, int & decimal_point) -> gr_complex

        Params: (decimal_point)
        """
        return _mer_swig.demapper_right_down_contellation(self, *args, **kwargs)

    def right_up_contellation(self, *args, **kwargs):
        """
        right_up_contellation(demapper self, int & decimal_point) -> gr_complex

        Params: (decimal_point)
        """
        return _mer_swig.demapper_right_up_contellation(self, *args, **kwargs)

demapper_swigregister = _mer_swig.demapper_swigregister
demapper_swigregister(demapper)

class mer(object):
    """<+description+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::mer self, double alpha) -> mer

        Params: (alpha)
        """
        this = _mer_swig.new_mer(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_mer
    __del__ = lambda self : None;
    def update_mer(self, *args, **kwargs):
        """
        update_mer(mer self, gr_complex iq, gr_complex iq_true) -> double

        Params: (iq, iq_true)
        """
        return _mer_swig.mer_update_mer(self, *args, **kwargs)

    def update_avg_tx_power(self, *args, **kwargs):
        """
        update_avg_tx_power(mer self, gr_complex iq_true) -> double

        Params: (iq_true)
        """
        return _mer_swig.mer_update_avg_tx_power(self, *args, **kwargs)

    def update_avg_error_power(self, *args, **kwargs):
        """
        update_avg_error_power(mer self, gr_complex iq, gr_complex iq_true) -> double

        Params: (iq, iq_true)
        """
        return _mer_swig.mer_update_avg_error_power(self, *args, **kwargs)

mer_swigregister = _mer_swig.mer_swigregister
mer_swigregister(mer)

class probe_ste_cf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_ste_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_ste_cf.

        To avoid accidental use of raw pointers, mer::probe_ste_cf's constructor is in a private implementation class. mer::probe_ste_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_ste_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_ste_cf
    __del__ = lambda self : None;
probe_ste_cf_swigregister = _mer_swig.probe_ste_cf_swigregister
probe_ste_cf_swigregister(probe_ste_cf)

def probe_ste_cf_make(*args, **kwargs):
  """
    probe_ste_cf_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_ste_cf_sptr

    Return a shared_ptr to a new instance of mer::probe_ste_cf.

    To avoid accidental use of raw pointers, mer::probe_ste_cf's constructor is in a private implementation class. mer::probe_ste_cf::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_ste_cf_make(*args, **kwargs)

class probe_ste_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_ste_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_ste_cf)> self) -> probe_ste_cf_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_ste_cf)> self, probe_ste_cf p) -> probe_ste_cf_sptr
        """
        this = _mer_swig.new_probe_ste_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_ste_cf_sptr self) -> probe_ste_cf"""
        return _mer_swig.probe_ste_cf_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_ste_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_ste_cf_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_ste_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_ste_cf.

        To avoid accidental use of raw pointers, mer::probe_ste_cf's constructor is in a private implementation class. mer::probe_ste_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_ste_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_ste_cf_sptr self) -> unsigned int"""
        return _mer_swig.probe_ste_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_ste_cf_sptr self, int which, int delay)
        declare_sample_delay(probe_ste_cf_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_ste_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_ste_cf_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_ste_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_ste_cf_sptr self) -> int"""
        return _mer_swig.probe_ste_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_ste_cf_sptr self) -> double"""
        return _mer_swig.probe_ste_cf_sptr_relative_rate(self)

    def start(self):
        """start(probe_ste_cf_sptr self) -> bool"""
        return _mer_swig.probe_ste_cf_sptr_start(self)

    def stop(self):
        """stop(probe_ste_cf_sptr self) -> bool"""
        return _mer_swig.probe_ste_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_ste_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_ste_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_ste_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_ste_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_ste_cf_sptr self) -> int"""
        return _mer_swig.probe_ste_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_ste_cf_sptr self, int m)"""
        return _mer_swig.probe_ste_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_ste_cf_sptr self)"""
        return _mer_swig.probe_ste_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_ste_cf_sptr self) -> bool"""
        return _mer_swig.probe_ste_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_ste_cf_sptr self, int m)"""
        return _mer_swig.probe_ste_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_ste_cf_sptr self) -> int"""
        return _mer_swig.probe_ste_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_ste_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_ste_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_ste_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_ste_cf_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_ste_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_ste_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_ste_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_ste_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_ste_cf_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_ste_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_ste_cf_sptr self, int which) -> float
        pc_input_buffers_full(probe_ste_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ste_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_ste_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_ste_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ste_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_ste_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_ste_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ste_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_ste_cf_sptr self, int which) -> float
        pc_output_buffers_full(probe_ste_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ste_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_ste_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_ste_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ste_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_ste_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_ste_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ste_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_ste_cf_sptr self) -> float"""
        return _mer_swig.probe_ste_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_ste_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_ste_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_ste_cf_sptr self)"""
        return _mer_swig.probe_ste_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_ste_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_ste_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_ste_cf_sptr self) -> int"""
        return _mer_swig.probe_ste_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_ste_cf_sptr self) -> int"""
        return _mer_swig.probe_ste_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_ste_cf_sptr self, int priority) -> int"""
        return _mer_swig.probe_ste_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_ste_cf_sptr self) -> std::string"""
        return _mer_swig.probe_ste_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_ste_cf_sptr self) -> std::string"""
        return _mer_swig.probe_ste_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_ste_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_ste_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_ste_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_ste_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_ste_cf_sptr self) -> long"""
        return _mer_swig.probe_ste_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_ste_cf_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_ste_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_ste_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_ste_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_ste_cf_sptr self) -> std::string"""
        return _mer_swig.probe_ste_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_ste_cf_sptr self, std::string name)"""
        return _mer_swig.probe_ste_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_ste_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_ste_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_ste_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_ste_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_ste_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_ste_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_ste_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_ste_cf_sptr_message_subscribers(self, *args, **kwargs)

probe_ste_cf_sptr_swigregister = _mer_swig.probe_ste_cf_sptr_swigregister
probe_ste_cf_sptr_swigregister(probe_ste_cf_sptr)

probe_ste_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_ste_cf = probe_ste_cf.make;

class ste(object):
    """<+description+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::ste self, int dim_constellation, double alpha) -> ste

        Params: (dim_constellation, alpha)
        """
        this = _mer_swig.new_ste(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_ste
    __del__ = lambda self : None;
    def update_ste(self, *args, **kwargs):
        """
        update_ste(ste self, gr_complex iq, gr_complex iq_true, int constellation_value) -> double

        Params: (iq, iq_true, constellation_value)
        """
        return _mer_swig.ste_update_ste(self, *args, **kwargs)

    def update_stem(self, *args, **kwargs):
        """
        update_stem(ste self, gr_complex iq, gr_complex iq_true, int constellation_value, double tx_power) -> double

        Params: (iq, iq_true, constellation_value, tx_power)
        """
        return _mer_swig.ste_update_stem(self, *args, **kwargs)

    def update_sted(self, *args, **kwargs):
        """
        update_sted(ste self, gr_complex iq, gr_complex iq_true, int constellation_value, double tx_power) -> double

        Params: (iq, iq_true, constellation_value, tx_power)
        """
        return _mer_swig.ste_update_sted(self, *args, **kwargs)

    def update_di(self, *args, **kwargs):
        """
        update_di(ste self, gr_complex iq, gr_complex iq_true, int constellation_value) -> gr_complex *

        Params: (iq, iq_true, constellation_value)
        """
        return _mer_swig.ste_update_di(self, *args, **kwargs)

ste_swigregister = _mer_swig.ste_swigregister
ste_swigregister(ste)

class probe_cs_cf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_cs_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_cs_cf.

        To avoid accidental use of raw pointers, mer::probe_cs_cf's constructor is in a private implementation class. mer::probe_cs_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_cs_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_cs_cf
    __del__ = lambda self : None;
probe_cs_cf_swigregister = _mer_swig.probe_cs_cf_swigregister
probe_cs_cf_swigregister(probe_cs_cf)

def probe_cs_cf_make(*args, **kwargs):
  """
    probe_cs_cf_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_cs_cf_sptr

    Return a shared_ptr to a new instance of mer::probe_cs_cf.

    To avoid accidental use of raw pointers, mer::probe_cs_cf's constructor is in a private implementation class. mer::probe_cs_cf::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_cs_cf_make(*args, **kwargs)

class probe_cs_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_cs_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_cs_cf)> self) -> probe_cs_cf_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_cs_cf)> self, probe_cs_cf p) -> probe_cs_cf_sptr
        """
        this = _mer_swig.new_probe_cs_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_cs_cf_sptr self) -> probe_cs_cf"""
        return _mer_swig.probe_cs_cf_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_cs_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_cs_cf_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_cs_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_cs_cf.

        To avoid accidental use of raw pointers, mer::probe_cs_cf's constructor is in a private implementation class. mer::probe_cs_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_cs_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_cs_cf_sptr self) -> unsigned int"""
        return _mer_swig.probe_cs_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_cs_cf_sptr self, int which, int delay)
        declare_sample_delay(probe_cs_cf_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_cs_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_cs_cf_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_cs_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_cs_cf_sptr self) -> int"""
        return _mer_swig.probe_cs_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_cs_cf_sptr self) -> double"""
        return _mer_swig.probe_cs_cf_sptr_relative_rate(self)

    def start(self):
        """start(probe_cs_cf_sptr self) -> bool"""
        return _mer_swig.probe_cs_cf_sptr_start(self)

    def stop(self):
        """stop(probe_cs_cf_sptr self) -> bool"""
        return _mer_swig.probe_cs_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_cs_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_cs_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_cs_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_cs_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_cs_cf_sptr self) -> int"""
        return _mer_swig.probe_cs_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_cs_cf_sptr self, int m)"""
        return _mer_swig.probe_cs_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_cs_cf_sptr self)"""
        return _mer_swig.probe_cs_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_cs_cf_sptr self) -> bool"""
        return _mer_swig.probe_cs_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_cs_cf_sptr self, int m)"""
        return _mer_swig.probe_cs_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_cs_cf_sptr self) -> int"""
        return _mer_swig.probe_cs_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_cs_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_cs_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_cs_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_cs_cf_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_cs_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_cs_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_cs_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_cs_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_cs_cf_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_cs_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_cs_cf_sptr self, int which) -> float
        pc_input_buffers_full(probe_cs_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_cs_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_cs_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_cs_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_cs_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_cs_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_cs_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_cs_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_cs_cf_sptr self, int which) -> float
        pc_output_buffers_full(probe_cs_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_cs_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_cs_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_cs_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_cs_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_cs_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_cs_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_cs_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_cs_cf_sptr self) -> float"""
        return _mer_swig.probe_cs_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_cs_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_cs_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_cs_cf_sptr self)"""
        return _mer_swig.probe_cs_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_cs_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_cs_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_cs_cf_sptr self) -> int"""
        return _mer_swig.probe_cs_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_cs_cf_sptr self) -> int"""
        return _mer_swig.probe_cs_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_cs_cf_sptr self, int priority) -> int"""
        return _mer_swig.probe_cs_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_cs_cf_sptr self) -> std::string"""
        return _mer_swig.probe_cs_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_cs_cf_sptr self) -> std::string"""
        return _mer_swig.probe_cs_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_cs_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_cs_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_cs_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_cs_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_cs_cf_sptr self) -> long"""
        return _mer_swig.probe_cs_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_cs_cf_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_cs_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_cs_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_cs_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_cs_cf_sptr self) -> std::string"""
        return _mer_swig.probe_cs_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_cs_cf_sptr self, std::string name)"""
        return _mer_swig.probe_cs_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_cs_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_cs_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_cs_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_cs_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_cs_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_cs_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_cs_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_cs_cf_sptr_message_subscribers(self, *args, **kwargs)

probe_cs_cf_sptr_swigregister = _mer_swig.probe_cs_cf_sptr_swigregister
probe_cs_cf_sptr_swigregister(probe_cs_cf_sptr)

probe_cs_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_cs_cf = probe_cs_cf.make;

class carrier_suppression(object):
    """<+description+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::carrier_suppression self, demapper demap) -> carrier_suppression

        Params: (demap)
        """
        this = _mer_swig.new_carrier_suppression(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_carrier_suppression
    __del__ = lambda self : None;
    def update_cs(self, *args, **kwargs):
        """
        update_cs(carrier_suppression self, double tx_power, gr_complex * di) -> double

        Params: (tx_power, di)
        """
        return _mer_swig.carrier_suppression_update_cs(self, *args, **kwargs)

    d_cs = _swig_property(_mer_swig.carrier_suppression_d_cs_get, _mer_swig.carrier_suppression_d_cs_set)
carrier_suppression_swigregister = _mer_swig.carrier_suppression_swigregister
carrier_suppression_swigregister(carrier_suppression)

class probe_ai_cf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_ai_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_ai_cf.

        To avoid accidental use of raw pointers, mer::probe_ai_cf's constructor is in a private implementation class. mer::probe_ai_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_ai_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_ai_cf
    __del__ = lambda self : None;
probe_ai_cf_swigregister = _mer_swig.probe_ai_cf_swigregister
probe_ai_cf_swigregister(probe_ai_cf)

def probe_ai_cf_make(*args, **kwargs):
  """
    probe_ai_cf_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_ai_cf_sptr

    Return a shared_ptr to a new instance of mer::probe_ai_cf.

    To avoid accidental use of raw pointers, mer::probe_ai_cf's constructor is in a private implementation class. mer::probe_ai_cf::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_ai_cf_make(*args, **kwargs)

class probe_ai_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_ai_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_ai_cf)> self) -> probe_ai_cf_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_ai_cf)> self, probe_ai_cf p) -> probe_ai_cf_sptr
        """
        this = _mer_swig.new_probe_ai_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_ai_cf_sptr self) -> probe_ai_cf"""
        return _mer_swig.probe_ai_cf_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_ai_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_ai_cf_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_ai_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_ai_cf.

        To avoid accidental use of raw pointers, mer::probe_ai_cf's constructor is in a private implementation class. mer::probe_ai_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_ai_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_ai_cf_sptr self) -> unsigned int"""
        return _mer_swig.probe_ai_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_ai_cf_sptr self, int which, int delay)
        declare_sample_delay(probe_ai_cf_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_ai_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_ai_cf_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_ai_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_ai_cf_sptr self) -> int"""
        return _mer_swig.probe_ai_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_ai_cf_sptr self) -> double"""
        return _mer_swig.probe_ai_cf_sptr_relative_rate(self)

    def start(self):
        """start(probe_ai_cf_sptr self) -> bool"""
        return _mer_swig.probe_ai_cf_sptr_start(self)

    def stop(self):
        """stop(probe_ai_cf_sptr self) -> bool"""
        return _mer_swig.probe_ai_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_ai_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_ai_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_ai_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_ai_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_ai_cf_sptr self) -> int"""
        return _mer_swig.probe_ai_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_ai_cf_sptr self, int m)"""
        return _mer_swig.probe_ai_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_ai_cf_sptr self)"""
        return _mer_swig.probe_ai_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_ai_cf_sptr self) -> bool"""
        return _mer_swig.probe_ai_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_ai_cf_sptr self, int m)"""
        return _mer_swig.probe_ai_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_ai_cf_sptr self) -> int"""
        return _mer_swig.probe_ai_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_ai_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_ai_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_ai_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_ai_cf_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_ai_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_ai_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_ai_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_ai_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_ai_cf_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_ai_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_ai_cf_sptr self, int which) -> float
        pc_input_buffers_full(probe_ai_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ai_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_ai_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_ai_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ai_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_ai_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_ai_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ai_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_ai_cf_sptr self, int which) -> float
        pc_output_buffers_full(probe_ai_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ai_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_ai_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_ai_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ai_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_ai_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_ai_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_ai_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_ai_cf_sptr self) -> float"""
        return _mer_swig.probe_ai_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_ai_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_ai_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_ai_cf_sptr self)"""
        return _mer_swig.probe_ai_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_ai_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_ai_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_ai_cf_sptr self) -> int"""
        return _mer_swig.probe_ai_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_ai_cf_sptr self) -> int"""
        return _mer_swig.probe_ai_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_ai_cf_sptr self, int priority) -> int"""
        return _mer_swig.probe_ai_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_ai_cf_sptr self) -> std::string"""
        return _mer_swig.probe_ai_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_ai_cf_sptr self) -> std::string"""
        return _mer_swig.probe_ai_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_ai_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_ai_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_ai_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_ai_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_ai_cf_sptr self) -> long"""
        return _mer_swig.probe_ai_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_ai_cf_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_ai_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_ai_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_ai_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_ai_cf_sptr self) -> std::string"""
        return _mer_swig.probe_ai_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_ai_cf_sptr self, std::string name)"""
        return _mer_swig.probe_ai_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_ai_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_ai_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_ai_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_ai_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_ai_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_ai_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_ai_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_ai_cf_sptr_message_subscribers(self, *args, **kwargs)

probe_ai_cf_sptr_swigregister = _mer_swig.probe_ai_cf_sptr_swigregister
probe_ai_cf_sptr_swigregister(probe_ai_cf_sptr)

probe_ai_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_ai_cf = probe_ai_cf.make;

class amplitude_imbalance(object):
    """<+description+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::amplitude_imbalance self, demapper demap) -> amplitude_imbalance

        Params: (demap)
        """
        this = _mer_swig.new_amplitude_imbalance(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_amplitude_imbalance
    __del__ = lambda self : None;
    def update_ai(self, *args, **kwargs):
        """
        update_ai(amplitude_imbalance self, double tx_power, gr_complex * di) -> gr_complex

        Params: (tx_power, di)
        """
        return _mer_swig.amplitude_imbalance_update_ai(self, *args, **kwargs)

amplitude_imbalance_swigregister = _mer_swig.amplitude_imbalance_swigregister
amplitude_imbalance_swigregister(amplitude_imbalance)

class probe_qe_cf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_qe_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_qe_cf.

        To avoid accidental use of raw pointers, mer::probe_qe_cf's constructor is in a private implementation class. mer::probe_qe_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_qe_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_qe_cf
    __del__ = lambda self : None;
probe_qe_cf_swigregister = _mer_swig.probe_qe_cf_swigregister
probe_qe_cf_swigregister(probe_qe_cf)

def probe_qe_cf_make(*args, **kwargs):
  """
    probe_qe_cf_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_qe_cf_sptr

    Return a shared_ptr to a new instance of mer::probe_qe_cf.

    To avoid accidental use of raw pointers, mer::probe_qe_cf's constructor is in a private implementation class. mer::probe_qe_cf::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_qe_cf_make(*args, **kwargs)

class probe_qe_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_qe_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_qe_cf)> self) -> probe_qe_cf_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_qe_cf)> self, probe_qe_cf p) -> probe_qe_cf_sptr
        """
        this = _mer_swig.new_probe_qe_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_qe_cf_sptr self) -> probe_qe_cf"""
        return _mer_swig.probe_qe_cf_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_qe_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_qe_cf_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_qe_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_qe_cf.

        To avoid accidental use of raw pointers, mer::probe_qe_cf's constructor is in a private implementation class. mer::probe_qe_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_qe_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_qe_cf_sptr self) -> unsigned int"""
        return _mer_swig.probe_qe_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_qe_cf_sptr self, int which, int delay)
        declare_sample_delay(probe_qe_cf_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_qe_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_qe_cf_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_qe_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_qe_cf_sptr self) -> int"""
        return _mer_swig.probe_qe_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_qe_cf_sptr self) -> double"""
        return _mer_swig.probe_qe_cf_sptr_relative_rate(self)

    def start(self):
        """start(probe_qe_cf_sptr self) -> bool"""
        return _mer_swig.probe_qe_cf_sptr_start(self)

    def stop(self):
        """stop(probe_qe_cf_sptr self) -> bool"""
        return _mer_swig.probe_qe_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_qe_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_qe_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_qe_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_qe_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_qe_cf_sptr self) -> int"""
        return _mer_swig.probe_qe_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_qe_cf_sptr self, int m)"""
        return _mer_swig.probe_qe_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_qe_cf_sptr self)"""
        return _mer_swig.probe_qe_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_qe_cf_sptr self) -> bool"""
        return _mer_swig.probe_qe_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_qe_cf_sptr self, int m)"""
        return _mer_swig.probe_qe_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_qe_cf_sptr self) -> int"""
        return _mer_swig.probe_qe_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_qe_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_qe_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_qe_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_qe_cf_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_qe_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_qe_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_qe_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_qe_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_qe_cf_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_qe_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_qe_cf_sptr self, int which) -> float
        pc_input_buffers_full(probe_qe_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_qe_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_qe_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_qe_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_qe_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_qe_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_qe_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_qe_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_qe_cf_sptr self, int which) -> float
        pc_output_buffers_full(probe_qe_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_qe_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_qe_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_qe_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_qe_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_qe_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_qe_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_qe_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_qe_cf_sptr self) -> float"""
        return _mer_swig.probe_qe_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_qe_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_qe_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_qe_cf_sptr self)"""
        return _mer_swig.probe_qe_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_qe_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_qe_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_qe_cf_sptr self) -> int"""
        return _mer_swig.probe_qe_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_qe_cf_sptr self) -> int"""
        return _mer_swig.probe_qe_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_qe_cf_sptr self, int priority) -> int"""
        return _mer_swig.probe_qe_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_qe_cf_sptr self) -> std::string"""
        return _mer_swig.probe_qe_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_qe_cf_sptr self) -> std::string"""
        return _mer_swig.probe_qe_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_qe_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_qe_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_qe_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_qe_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_qe_cf_sptr self) -> long"""
        return _mer_swig.probe_qe_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_qe_cf_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_qe_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_qe_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_qe_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_qe_cf_sptr self) -> std::string"""
        return _mer_swig.probe_qe_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_qe_cf_sptr self, std::string name)"""
        return _mer_swig.probe_qe_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_qe_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_qe_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_qe_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_qe_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_qe_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_qe_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_qe_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_qe_cf_sptr_message_subscribers(self, *args, **kwargs)

probe_qe_cf_sptr_swigregister = _mer_swig.probe_qe_cf_sptr_swigregister
probe_qe_cf_sptr_swigregister(probe_qe_cf_sptr)

probe_qe_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_qe_cf = probe_qe_cf.make;

class quadrature_error(object):
    """<+description+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::quadrature_error self, int dim_constellation, double alpha, demapper demap) -> quadrature_error

        Params: (dim_constellation, alpha, demap)
        """
        this = _mer_swig.new_quadrature_error(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_quadrature_error
    __del__ = lambda self : None;
    def update_qe(self, *args, **kwargs):
        """
        update_qe(quadrature_error self, double tx_power, gr_complex * di, double & angleh, double & anglev)

        Params: (tx_power, di, angleh, anglev)
        """
        return _mer_swig.quadrature_error_update_qe(self, *args, **kwargs)

quadrature_error_swigregister = _mer_swig.quadrature_error_swigregister
quadrature_error_swigregister(quadrature_error)

class probe_pj_cf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_pj_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_pj_cf.

        To avoid accidental use of raw pointers, mer::probe_pj_cf's constructor is in a private implementation class. mer::probe_pj_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_pj_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_pj_cf
    __del__ = lambda self : None;
probe_pj_cf_swigregister = _mer_swig.probe_pj_cf_swigregister
probe_pj_cf_swigregister(probe_pj_cf)

def probe_pj_cf_make(*args, **kwargs):
  """
    probe_pj_cf_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_pj_cf_sptr

    Return a shared_ptr to a new instance of mer::probe_pj_cf.

    To avoid accidental use of raw pointers, mer::probe_pj_cf's constructor is in a private implementation class. mer::probe_pj_cf::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_pj_cf_make(*args, **kwargs)

class probe_pj_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_pj_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_pj_cf)> self) -> probe_pj_cf_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_pj_cf)> self, probe_pj_cf p) -> probe_pj_cf_sptr
        """
        this = _mer_swig.new_probe_pj_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_pj_cf_sptr self) -> probe_pj_cf"""
        return _mer_swig.probe_pj_cf_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_pj_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_pj_cf_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_pj_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_pj_cf.

        To avoid accidental use of raw pointers, mer::probe_pj_cf's constructor is in a private implementation class. mer::probe_pj_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_pj_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_pj_cf_sptr self) -> unsigned int"""
        return _mer_swig.probe_pj_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_pj_cf_sptr self, int which, int delay)
        declare_sample_delay(probe_pj_cf_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_pj_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_pj_cf_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_pj_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_pj_cf_sptr self) -> int"""
        return _mer_swig.probe_pj_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_pj_cf_sptr self) -> double"""
        return _mer_swig.probe_pj_cf_sptr_relative_rate(self)

    def start(self):
        """start(probe_pj_cf_sptr self) -> bool"""
        return _mer_swig.probe_pj_cf_sptr_start(self)

    def stop(self):
        """stop(probe_pj_cf_sptr self) -> bool"""
        return _mer_swig.probe_pj_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_pj_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_pj_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_pj_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_pj_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_pj_cf_sptr self) -> int"""
        return _mer_swig.probe_pj_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_pj_cf_sptr self, int m)"""
        return _mer_swig.probe_pj_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_pj_cf_sptr self)"""
        return _mer_swig.probe_pj_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_pj_cf_sptr self) -> bool"""
        return _mer_swig.probe_pj_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_pj_cf_sptr self, int m)"""
        return _mer_swig.probe_pj_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_pj_cf_sptr self) -> int"""
        return _mer_swig.probe_pj_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_pj_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_pj_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_pj_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_pj_cf_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_pj_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_pj_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_pj_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_pj_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_pj_cf_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_pj_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_pj_cf_sptr self, int which) -> float
        pc_input_buffers_full(probe_pj_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_pj_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_pj_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_pj_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_pj_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_pj_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_pj_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_pj_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_pj_cf_sptr self, int which) -> float
        pc_output_buffers_full(probe_pj_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_pj_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_pj_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_pj_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_pj_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_pj_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_pj_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_pj_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_pj_cf_sptr self) -> float"""
        return _mer_swig.probe_pj_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_pj_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_pj_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_pj_cf_sptr self)"""
        return _mer_swig.probe_pj_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_pj_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_pj_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_pj_cf_sptr self) -> int"""
        return _mer_swig.probe_pj_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_pj_cf_sptr self) -> int"""
        return _mer_swig.probe_pj_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_pj_cf_sptr self, int priority) -> int"""
        return _mer_swig.probe_pj_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_pj_cf_sptr self) -> std::string"""
        return _mer_swig.probe_pj_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_pj_cf_sptr self) -> std::string"""
        return _mer_swig.probe_pj_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_pj_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_pj_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_pj_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_pj_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_pj_cf_sptr self) -> long"""
        return _mer_swig.probe_pj_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_pj_cf_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_pj_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_pj_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_pj_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_pj_cf_sptr self) -> std::string"""
        return _mer_swig.probe_pj_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_pj_cf_sptr self, std::string name)"""
        return _mer_swig.probe_pj_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_pj_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_pj_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_pj_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_pj_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_pj_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_pj_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_pj_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_pj_cf_sptr_message_subscribers(self, *args, **kwargs)

probe_pj_cf_sptr_swigregister = _mer_swig.probe_pj_cf_sptr_swigregister
probe_pj_cf_sptr_swigregister(probe_pj_cf_sptr)

probe_pj_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_pj_cf = probe_pj_cf.make;

class phase_jitter(object):
    """<+description+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """
        __init__(gr::mer::phase_jitter self, int dim_constellation, double alpha, demapper demap) -> phase_jitter

        Params: (dim_constellation, alpha, demap)
        """
        this = _mer_swig.new_phase_jitter(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mer_swig.delete_phase_jitter
    __del__ = lambda self : None;
    def update_pj(self, *args, **kwargs):
        """
        update_pj(phase_jitter self, gr_complex iq, gr_complex cs, gr_complex ai, gr_complex qe, double tx_power, double & snr) -> double

        Params: (iq, cs, ai, qe, tx_power, snr)
        """
        return _mer_swig.phase_jitter_update_pj(self, *args, **kwargs)

phase_jitter_swigregister = _mer_swig.phase_jitter_swigregister
phase_jitter_swigregister(phase_jitter)

class probe_all_meassurements_cf(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(pmt_vector_cfloat symbol_table, double alpha) -> probe_all_meassurements_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_all_meassurements_cf.

        To avoid accidental use of raw pointers, mer::probe_all_meassurements_cf's constructor is in a private implementation class. mer::probe_all_meassurements_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_all_meassurements_cf_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _mer_swig.delete_probe_all_meassurements_cf
    __del__ = lambda self : None;
probe_all_meassurements_cf_swigregister = _mer_swig.probe_all_meassurements_cf_swigregister
probe_all_meassurements_cf_swigregister(probe_all_meassurements_cf)

def probe_all_meassurements_cf_make(*args, **kwargs):
  """
    probe_all_meassurements_cf_make(pmt_vector_cfloat symbol_table, double alpha) -> probe_all_meassurements_cf_sptr

    Return a shared_ptr to a new instance of mer::probe_all_meassurements_cf.

    To avoid accidental use of raw pointers, mer::probe_all_meassurements_cf's constructor is in a private implementation class. mer::probe_all_meassurements_cf::make is the public interface for creating new instances.

    Params: (symbol_table, alpha)
    """
  return _mer_swig.probe_all_meassurements_cf_make(*args, **kwargs)

class probe_all_meassurements_cf_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::mer::probe_all_meassurements_cf)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::mer::probe_all_meassurements_cf)> self) -> probe_all_meassurements_cf_sptr
        __init__(boost::shared_ptr<(gr::mer::probe_all_meassurements_cf)> self, probe_all_meassurements_cf p) -> probe_all_meassurements_cf_sptr
        """
        this = _mer_swig.new_probe_all_meassurements_cf_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(probe_all_meassurements_cf_sptr self) -> probe_all_meassurements_cf"""
        return _mer_swig.probe_all_meassurements_cf_sptr___deref__(self)

    __swig_destroy__ = _mer_swig.delete_probe_all_meassurements_cf_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(probe_all_meassurements_cf_sptr self, pmt_vector_cfloat symbol_table, double alpha) -> probe_all_meassurements_cf_sptr

        Return a shared_ptr to a new instance of mer::probe_all_meassurements_cf.

        To avoid accidental use of raw pointers, mer::probe_all_meassurements_cf's constructor is in a private implementation class. mer::probe_all_meassurements_cf::make is the public interface for creating new instances.

        Params: (symbol_table, alpha)
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(probe_all_meassurements_cf_sptr self) -> unsigned int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(probe_all_meassurements_cf_sptr self, int which, int delay)
        declare_sample_delay(probe_all_meassurements_cf_sptr self, unsigned int delay)
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(probe_all_meassurements_cf_sptr self, int which) -> unsigned int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(probe_all_meassurements_cf_sptr self) -> int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(probe_all_meassurements_cf_sptr self) -> double"""
        return _mer_swig.probe_all_meassurements_cf_sptr_relative_rate(self)

    def start(self):
        """start(probe_all_meassurements_cf_sptr self) -> bool"""
        return _mer_swig.probe_all_meassurements_cf_sptr_start(self)

    def stop(self):
        """stop(probe_all_meassurements_cf_sptr self) -> bool"""
        return _mer_swig.probe_all_meassurements_cf_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(probe_all_meassurements_cf_sptr self, unsigned int which_input) -> uint64_t"""
        return _mer_swig.probe_all_meassurements_cf_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(probe_all_meassurements_cf_sptr self, unsigned int which_output) -> uint64_t"""
        return _mer_swig.probe_all_meassurements_cf_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(probe_all_meassurements_cf_sptr self) -> int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(probe_all_meassurements_cf_sptr self, int m)"""
        return _mer_swig.probe_all_meassurements_cf_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(probe_all_meassurements_cf_sptr self)"""
        return _mer_swig.probe_all_meassurements_cf_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(probe_all_meassurements_cf_sptr self) -> bool"""
        return _mer_swig.probe_all_meassurements_cf_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(probe_all_meassurements_cf_sptr self, int m)"""
        return _mer_swig.probe_all_meassurements_cf_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(probe_all_meassurements_cf_sptr self) -> int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(probe_all_meassurements_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_all_meassurements_cf_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(probe_all_meassurements_cf_sptr self, long max_output_buffer)
        set_max_output_buffer(probe_all_meassurements_cf_sptr self, int port, long max_output_buffer)
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(probe_all_meassurements_cf_sptr self, int i) -> long"""
        return _mer_swig.probe_all_meassurements_cf_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(probe_all_meassurements_cf_sptr self, long min_output_buffer)
        set_min_output_buffer(probe_all_meassurements_cf_sptr self, int port, long min_output_buffer)
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(probe_all_meassurements_cf_sptr self, int which) -> float
        pc_input_buffers_full(probe_all_meassurements_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(probe_all_meassurements_cf_sptr self, int which) -> float
        pc_input_buffers_full_avg(probe_all_meassurements_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(probe_all_meassurements_cf_sptr self, int which) -> float
        pc_input_buffers_full_var(probe_all_meassurements_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(probe_all_meassurements_cf_sptr self, int which) -> float
        pc_output_buffers_full(probe_all_meassurements_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(probe_all_meassurements_cf_sptr self, int which) -> float
        pc_output_buffers_full_avg(probe_all_meassurements_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(probe_all_meassurements_cf_sptr self, int which) -> float
        pc_output_buffers_full_var(probe_all_meassurements_cf_sptr self) -> pmt_vector_float
        """
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(probe_all_meassurements_cf_sptr self) -> float"""
        return _mer_swig.probe_all_meassurements_cf_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(probe_all_meassurements_cf_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _mer_swig.probe_all_meassurements_cf_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(probe_all_meassurements_cf_sptr self)"""
        return _mer_swig.probe_all_meassurements_cf_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(probe_all_meassurements_cf_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _mer_swig.probe_all_meassurements_cf_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(probe_all_meassurements_cf_sptr self) -> int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(probe_all_meassurements_cf_sptr self) -> int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(probe_all_meassurements_cf_sptr self, int priority) -> int"""
        return _mer_swig.probe_all_meassurements_cf_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(probe_all_meassurements_cf_sptr self) -> std::string"""
        return _mer_swig.probe_all_meassurements_cf_sptr_name(self)

    def symbol_name(self):
        """symbol_name(probe_all_meassurements_cf_sptr self) -> std::string"""
        return _mer_swig.probe_all_meassurements_cf_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(probe_all_meassurements_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_all_meassurements_cf_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(probe_all_meassurements_cf_sptr self) -> io_signature_sptr"""
        return _mer_swig.probe_all_meassurements_cf_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(probe_all_meassurements_cf_sptr self) -> long"""
        return _mer_swig.probe_all_meassurements_cf_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(probe_all_meassurements_cf_sptr self) -> basic_block_sptr"""
        return _mer_swig.probe_all_meassurements_cf_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(probe_all_meassurements_cf_sptr self, int ninputs, int noutputs) -> bool"""
        return _mer_swig.probe_all_meassurements_cf_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(probe_all_meassurements_cf_sptr self) -> std::string"""
        return _mer_swig.probe_all_meassurements_cf_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(probe_all_meassurements_cf_sptr self, std::string name)"""
        return _mer_swig.probe_all_meassurements_cf_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(probe_all_meassurements_cf_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _mer_swig.probe_all_meassurements_cf_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(probe_all_meassurements_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_all_meassurements_cf_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(probe_all_meassurements_cf_sptr self) -> swig_int_ptr"""
        return _mer_swig.probe_all_meassurements_cf_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(probe_all_meassurements_cf_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _mer_swig.probe_all_meassurements_cf_sptr_message_subscribers(self, *args, **kwargs)

probe_all_meassurements_cf_sptr_swigregister = _mer_swig.probe_all_meassurements_cf_sptr_swigregister
probe_all_meassurements_cf_sptr_swigregister(probe_all_meassurements_cf_sptr)

probe_all_meassurements_cf_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
probe_all_meassurements_cf = probe_all_meassurements_cf.make;



