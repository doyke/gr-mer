/* -*- c++ -*- */
/* 
 * Copyright 2015
 * Pablo Belzarena <belza@fing.edu.uy>, Gabriel Gomez,  Victor Gonzalez-Barbone, Pablo Flores Guridi, Federico Larroca. 
 * ARTES Group
 * http://iie.fing.edu.uy/investigacion/grupos/artes/ingles/index.php3
 * Instituto de Ingenieria Electrica, Facultad de Ingenieria,
 * Universidad de la Republica, Uruguay.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/* PROBE DIGITAL MODULATION MEASUREMENTS
 * This block estimates the Modulation Error Ratio, System Target Error,Carrier Suppression error ,Amplitud Imbalance error,Quadrature Eerror and Phase Jitter error.
 * This block uses mer.cc to calculate the MER and average tx_power, uses the ste.cc to update d_di vector and to estimate the STE value, uses quadrature_error.cc to calculate the qe error, 
 * uses the carrier_suppression.cc to calculate the cs error,  uses the amplitude_imbalance.cc to calculate the ai error and the phase_jitter.cc to calculate the pj error and the snr. 
 * Please read first mer.cc, ste.cc, quadrature_error.cc, amplitude_imbalance.cc, carrier_suppression.cc and phase_jitter.cc  files.
 * With each new sample updates di,tx power,ai,cs,qe and the pj and snr values. This block has nine outputs. 
 * This class uses demapper.cc class to clasify to the constellation points of the received samples.
 */



#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "probe_all_meassurements_cf_impl.h"

namespace gr {
  namespace mer {

    probe_all_meassurements_cf::sptr
    probe_all_meassurements_cf::make(const std::vector<gr_complex> &symbol_table, double alpha)
    {
      return gnuradio::get_initial_sptr
        (new probe_all_meassurements_cf_impl(symbol_table, alpha));
    }

   /*
    * The private constructor
    * Receives the symbol table and the averaging parameter alpha
    * The symbol table is used by the demapper.cc class 
    * The parameter alpha is used by ste.cc class to average d_di vector and mer class to average the tx power 
    */
    probe_all_meassurements_cf_impl::probe_all_meassurements_cf_impl(const std::vector<gr_complex> &symbol_table, double alpha)
      : gr::sync_block("probe_all_meassurements_cf",
              gr::io_signature::make(1, 1, sizeof(gr_complex)),
              gr::io_signature::make(9, 9, sizeof(float)))
    {
	d_alpha = alpha;
      	d_dim_constellation = symbol_table.size();
      	d_demapper = new demapper(symbol_table);
	d_pj = new phase_jitter(d_dim_constellation,d_demapper);
	d_ai = new amplitude_imbalance(d_demapper);
	d_qe = new quadrature_error(d_demapper);
	d_cs = new carrier_suppression(d_demapper);
	d_mer = new mer(d_alpha);
	d_ste = new ste(d_dim_constellation,d_alpha);
    }
    /*
     * Our virtual destructor.
     */
    probe_all_meassurements_cf_impl::~probe_all_meassurements_cf_impl()
    {
    }

    int
    probe_all_meassurements_cf_impl::work(int noutput_items,
			  gr_vector_const_void_star &input_items,
			  gr_vector_void_star &output_items)
    {
 	const gr_complex *in = (const gr_complex*)input_items[0];
      	float *angleh_out = NULL,*anglev_out = NULL, *pj_out=NULL,*snr_out=NULL,*ai_real_out=NULL,*ai_imag_out=NULL,*cs_out=NULL,*mer_out=NULL,*ste_out=NULL;
        mer_out = (float *) output_items[0];
	ste_out = (float *) output_items[1];
	cs_out = (float *) output_items[2];
	ai_real_out = (float *) output_items[3];
	ai_imag_out = (float *) output_items[4];
	angleh_out = (float *) output_items[5];
	anglev_out = (float *) output_items[6];
	pj_out = (float *) output_items[7];
        snr_out = (float *) output_items[8];

	double tx_power;
     	gr_complex iq_true,ai,*di,qe,cs;
	double ste;
      	int constellation_value=0;
	for(int j=0; j < noutput_items; j++) {
	      	iq_true = d_demapper->demap(in[j],constellation_value);
		tx_power = d_mer->update_avg_tx_power(iq_true);
		mer_out[j]=d_mer->update_mer(in[j],iq_true);

		di = d_ste->update_di(in[j],iq_true,constellation_value);
		ste_out[j]=d_ste->update_ste(in[j],iq_true,constellation_value);

		ai = d_ai->update_ai(tx_power,di);
		ai_real_out[j] = real(ai);
		ai_imag_out[j] = imag(ai);

		double angle1, angle2;
		d_qe->update_qe(tx_power,di,angle1,angle2);
		angleh_out[j] = angle1*180/3.1416;
		anglev_out[j] = angle2*180/3.1416;
		qe= gr_complex(angle1,angle2);
		cs_out[j] = d_cs->update_cs(tx_power,di);
		cs = d_cs->d_cs;
		// as we use the right up constellation cloud to estimate the pj, it is not necessary to interpolate the angle neither the ai
		double snr;
		pj_out[j] = d_pj->update_pj(in[j],cs,ai,qe,tx_power,snr);
		snr_out[j] = snr;
	}
        // Tell runtime system how many output items we produced.
        return noutput_items;
    }

  } /* namespace mer */
} /* namespace gr */

